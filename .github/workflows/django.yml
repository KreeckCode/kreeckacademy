# Define the name of the workflow
name: Django CI/CD

# Specify the events that trigger the workflow
on:
  push:
    branches: [ "production" ]  # Trigger on push events to the production branch
  pull_request:
    branches: [ "production" ]  # Trigger on pull requests to the production branch

# Define the jobs in the workflow
jobs:
  # Build and Test job
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]  # Test against multiple Python versions

    steps:
    # Check out the repository
    - uses: actions/checkout@v4

    # Set up Python environment
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    # Cache pip dependencies
    - name: Cache Dependencies
      uses: actions/cache@v4.0.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # Install dependencies
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run tests and generate coverage report
    - name: Run Tests
      run: |
        python manage.py test
        coverage run manage.py test
        coverage report
        coverage xml

    # Upload test coverage to Codecov
    - name: Upload Test Coverage
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml

  # Docker build and deploy job
  deploy:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    needs: build  # Run this job after the build job
    steps:
    # Check out the repository
    - uses: actions/checkout@v4

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Stop the running Docker container (optional based on your setup)
    - name: Stop Running Container
      run: |
        if docker ps | grep -q my-django-app; then
          docker stop my-django-app && docker rm my-django-app
        fi

    # Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        docker buildx build --push --platform linux/amd64,linux/arm64 --tag ${{ secrets.DOCKER_USERNAME }}/my-django-app:latest .

    # Deploy Docker container
    - name: Deploy Docker Container
      run: |
        docker run -d --name my-django-app --restart always -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/my-django-app:latest

  # Database migrations job
  migrations:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Apply Database Migrations
      run: |
        docker exec -it my-django-app python manage.py migrate

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [build, deploy, migrations]
    steps:
    - name: Send Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_COLOR: good
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      with:
        status: ${{ job.status }}
